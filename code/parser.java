
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\015\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\012\000\002\005\004" +
    "\000\002\005\003\000\002\006\005\000\002\006\010\000" +
    "\002\006\011\000\002\007\012\000\002\010\004\000\002" +
    "\010\002\000\002\011\005\000\002\012\012\000\002\013" +
    "\004\000\002\013\003\000\002\014\014\000\002\015\004" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\007\000\002\016\006\000\002" +
    "\017\012\000\002\017\012\000\002\017\015\000\002\017" +
    "\012\000\002\020\010\000\002\020\012\000\002\021\010" +
    "\000\002\031\003\000\002\031\005\000\002\022\005\000" +
    "\002\022\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\012\000\002\025\004\000\002\025" +
    "\003\000\002\026\007\000\002\026\011\000\002\026\007" +
    "\000\002\026\011\000\002\027\005\000\002\027\003\000" +
    "\002\030\015\000\002\030\015\000\002\030\015\000\002" +
    "\030\015\000\002\030\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\004\040\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\041\010\001\002\000\004\040\011\001\002\000" +
    "\004\005\277\001\002\000\004\040\013\001\002\000\004" +
    "\006\263\001\002\000\004\040\015\001\002\000\004\007" +
    "\135\001\002\000\004\040\017\001\002\000\004\010\025" +
    "\001\002\000\004\040\021\001\002\000\004\042\022\001" +
    "\002\000\004\004\023\001\002\000\004\041\024\001\002" +
    "\000\004\002\001\001\002\000\004\041\026\001\002\000" +
    "\006\017\031\020\027\001\002\000\004\034\122\001\002" +
    "\000\004\040\116\001\002\000\004\034\034\001\002\000" +
    "\010\017\031\020\027\040\uffd8\001\002\000\004\040\uffd9" +
    "\001\002\000\004\037\035\001\002\000\006\043\037\045" +
    "\040\001\002\000\004\047\115\001\002\000\006\036\050" +
    "\053\047\001\002\000\004\043\037\001\002\000\006\046" +
    "\uffd2\052\uffd2\001\002\000\006\046\044\052\043\001\002" +
    "\000\004\043\037\001\002\000\004\047\045\001\002\000" +
    "\010\017\uffd4\020\uffd4\040\uffd4\001\002\000\006\046\uffd3" +
    "\052\uffd3\001\002\000\004\052\104\001\002\000\004\052" +
    "\051\001\002\000\006\036\053\053\052\001\002\000\004" +
    "\052\075\001\002\000\004\052\054\001\002\000\006\036" +
    "\056\053\055\001\002\000\004\052\070\001\002\000\004" +
    "\052\057\001\002\000\006\036\061\053\060\001\002\000" +
    "\004\052\065\001\002\000\004\052\062\001\002\000\004" +
    "\036\063\001\002\000\004\044\064\001\002\000\010\046" +
    "\uffd1\047\uffd1\052\uffd1\001\002\000\004\036\066\001\002" +
    "\000\004\044\067\001\002\000\010\046\uffcd\047\uffcd\052" +
    "\uffcd\001\002\000\004\036\071\001\002\000\004\052\072" +
    "\001\002\000\004\036\073\001\002\000\004\044\074\001" +
    "\002\000\010\046\uffce\047\uffce\052\uffce\001\002\000\004" +
    "\036\076\001\002\000\004\052\077\001\002\000\004\036" +
    "\100\001\002\000\004\052\101\001\002\000\004\036\102" +
    "\001\002\000\004\044\103\001\002\000\010\046\uffcf\047" +
    "\uffcf\052\uffcf\001\002\000\004\036\105\001\002\000\004" +
    "\052\106\001\002\000\004\036\107\001\002\000\004\052" +
    "\110\001\002\000\004\036\111\001\002\000\004\052\112" +
    "\001\002\000\004\036\113\001\002\000\004\044\114\001" +
    "\002\000\010\046\uffd0\047\uffd0\052\uffd0\001\002\000\010" +
    "\017\uffd5\020\uffd5\040\uffd5\001\002\000\004\042\117\001" +
    "\002\000\004\010\120\001\002\000\004\041\121\001\002" +
    "\000\004\040\uffda\001\002\000\004\037\123\001\002\000" +
    "\006\034\124\045\125\001\002\000\004\047\134\001\002" +
    "\000\004\034\127\001\002\000\004\046\132\001\002\000" +
    "\010\046\ufffe\047\ufffe\052\130\001\002\000\004\034\127" +
    "\001\002\000\006\046\uffff\047\uffff\001\002\000\004\047" +
    "\133\001\002\000\010\017\uffd6\020\uffd6\040\uffd6\001\002" +
    "\000\010\017\uffd7\020\uffd7\040\uffd7\001\002\000\004\041" +
    "\136\001\002\000\004\040\140\001\002\000\004\040\256" +
    "\001\002\000\004\011\142\001\002\000\004\040\ufff1\001" +
    "\002\000\004\034\143\001\002\000\004\041\144\001\002" +
    "\000\014\012\151\016\150\021\154\022\155\034\146\001" +
    "\002\000\024\012\uffed\014\uffed\016\uffed\021\uffed\022\uffed" +
    "\024\uffed\025\uffed\034\uffed\040\uffed\001\002\000\004\047" +
    "\253\001\002\000\024\012\151\014\uffee\016\150\021\154" +
    "\022\155\024\uffee\025\uffee\034\146\040\uffee\001\002\000" +
    "\004\043\240\001\002\000\004\034\210\001\002\000\004" +
    "\040\203\001\002\000\024\012\uffec\014\uffec\016\uffec\021" +
    "\uffec\022\uffec\024\uffec\025\uffec\034\uffec\040\uffec\001\002" +
    "\000\004\034\201\001\002\000\004\043\156\001\002\000" +
    "\006\033\171\034\172\001\002\000\004\023\160\001\002" +
    "\000\014\012\151\016\150\021\154\022\155\034\146\001" +
    "\002\000\006\024\162\025\163\001\002\000\014\012\151" +
    "\016\150\021\154\022\155\034\146\001\002\000\004\050" +
    "\164\001\002\000\024\012\uffe4\014\uffe4\016\uffe4\021\uffe4" +
    "\022\uffe4\024\uffe4\025\uffe4\034\uffe4\040\uffe4\001\002\000" +
    "\004\025\166\001\002\000\004\050\167\001\002\000\024" +
    "\012\uffe3\014\uffe3\016\uffe3\021\uffe3\022\uffe3\024\uffe3\025" +
    "\uffe3\034\uffe3\040\uffe3\001\002\000\004\037\175\001\002" +
    "\000\010\037\uffe1\044\uffe1\052\uffe1\001\002\000\004\047" +
    "\173\001\002\000\004\026\174\001\002\000\010\037\uffe0" +
    "\044\uffe0\052\uffe0\001\002\000\004\037\176\001\002\000" +
    "\006\033\171\034\172\001\002\000\004\044\200\001\002" +
    "\000\004\023\uffe2\001\002\000\004\050\202\001\002\000" +
    "\024\012\uffeb\014\uffeb\016\uffeb\021\uffeb\022\uffeb\024\uffeb" +
    "\025\uffeb\034\uffeb\040\uffeb\001\002\000\004\042\204\001" +
    "\002\000\004\011\205\001\002\000\004\034\206\001\002" +
    "\000\004\041\207\001\002\000\004\040\ufff0\001\002\000" +
    "\004\051\211\001\002\000\010\027\213\031\212\034\214" +
    "\001\002\000\006\013\225\043\226\001\002\000\004\013" +
    "\221\001\002\000\004\013\215\001\002\000\014\012\151" +
    "\016\150\021\154\022\155\034\146\001\002\000\004\014" +
    "\217\001\002\000\004\050\220\001\002\000\024\012\uffe5" +
    "\014\uffe5\016\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\034" +
    "\uffe5\040\uffe5\001\002\000\014\012\151\016\150\021\154" +
    "\022\155\034\146\001\002\000\004\014\223\001\002\000" +
    "\004\050\224\001\002\000\024\012\uffe8\014\uffe8\016\uffe8" +
    "\021\uffe8\022\uffe8\024\uffe8\025\uffe8\034\uffe8\040\uffe8\001" +
    "\002\000\014\012\151\016\150\021\154\022\155\034\146" +
    "\001\002\000\004\030\227\001\002\000\004\044\230\001" +
    "\002\000\004\013\231\001\002\000\014\012\151\016\150" +
    "\021\154\022\155\034\146\001\002\000\004\014\233\001" +
    "\002\000\004\050\234\001\002\000\024\012\uffe6\014\uffe6" +
    "\016\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6\034\uffe6\040" +
    "\uffe6\001\002\000\004\014\236\001\002\000\004\050\237" +
    "\001\002\000\024\012\uffe7\014\uffe7\016\uffe7\021\uffe7\022" +
    "\uffe7\024\uffe7\025\uffe7\034\uffe7\040\uffe7\001\002\000\010" +
    "\033\171\034\243\035\244\001\002\000\006\044\uffde\052" +
    "\uffde\001\002\000\006\044\uffdb\052\uffdb\001\002\000\010" +
    "\044\uffdc\047\173\052\uffdc\001\002\000\006\044\uffdd\052" +
    "\uffdd\001\002\000\006\044\247\052\246\001\002\000\010" +
    "\033\171\034\243\035\244\001\002\000\004\050\250\001" +
    "\002\000\024\012\uffea\014\uffea\016\uffea\021\uffea\022\uffea" +
    "\024\uffea\025\uffea\034\uffea\040\uffea\001\002\000\006\044" +
    "\uffdf\052\uffdf\001\002\000\012\014\uffef\024\uffef\025\uffef" +
    "\040\uffef\001\002\000\004\026\254\001\002\000\004\050" +
    "\255\001\002\000\024\012\uffe9\014\uffe9\016\uffe9\021\uffe9" +
    "\022\uffe9\024\uffe9\025\uffe9\034\uffe9\040\uffe9\001\002\000" +
    "\006\011\142\042\260\001\002\000\004\040\ufff2\001\002" +
    "\000\004\007\261\001\002\000\004\041\262\001\002\000" +
    "\004\040\ufff3\001\002\000\004\041\264\001\002\000\006" +
    "\032\267\040\ufff5\001\002\000\006\032\267\040\ufff5\001" +
    "\002\000\004\040\272\001\002\000\004\034\127\001\002" +
    "\000\004\047\271\001\002\000\006\032\ufff4\040\ufff4\001" +
    "\002\000\004\042\273\001\002\000\004\006\274\001\002" +
    "\000\004\041\275\001\002\000\004\040\ufff7\001\002\000" +
    "\004\040\ufff6\001\002\000\004\041\300\001\002\000\010" +
    "\015\301\027\303\031\302\001\002\000\004\034\322\001" +
    "\002\000\004\043\315\001\002\000\004\034\127\001\002" +
    "\000\004\040\307\001\002\000\012\015\301\027\303\031" +
    "\302\040\ufffb\001\002\000\004\040\ufffc\001\002\000\004" +
    "\042\310\001\002\000\004\005\311\001\002\000\004\041" +
    "\312\001\002\000\004\040\ufffd\001\002\000\004\047\314" +
    "\001\002\000\012\015\ufffa\027\ufffa\031\ufffa\040\ufffa\001" +
    "\002\000\004\030\316\001\002\000\004\044\317\001\002" +
    "\000\004\034\127\001\002\000\004\047\321\001\002\000" +
    "\012\015\ufff9\027\ufff9\031\ufff9\040\ufff9\001\002\000\004" +
    "\037\323\001\002\000\004\045\324\001\002\000\004\034" +
    "\127\001\002\000\004\046\326\001\002\000\004\047\327" +
    "\001\002\000\012\015\ufff8\027\ufff8\031\ufff8\040\ufff8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\011\001\001\000\002\001\001\000\004\007\013\001" +
    "\001\000\002\001\001\000\004\012\015\001\001\000\002" +
    "\001\001\000\004\024\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\027\026\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\032\026\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\041\030" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\136\014\140\001" +
    "\001\000\004\014\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\151\016\146\017\144\020\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\251\016\146\017\144\020" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\156\001\001\000\004\031\167\001\001\000\002\001\001" +
    "\000\012\015\160\016\146\017\144\020\152\001\001\000" +
    "\002\001\001\000\012\015\164\016\146\017\144\020\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\215\016\146\017\144\020" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\221\016\146\017\144\020\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\234\016\146\017\144\020\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\231\016\146\017\144\020\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\244\023" +
    "\240\031\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\250\031\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\265\011\264" +
    "\001\001\000\006\010\275\011\264\001\001\000\002\001" +
    "\001\000\004\003\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\303\006\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\312\001\001\000\002\001\001" +
    "\000\006\005\305\006\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
	new parser(new Yylex(new InputStreamReader(System.in))).parse();
	}

	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par d�faut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
		System.err.println("-> mais on continue l'analyse... ");
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if (info == null) System.err.println(m);
		else System.err.println(m+" : "+info);
		System.err.println("-> arr�t de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}


public String tokenToString (Symbol token) {
// qqs exemples pour voir...
     switch (token.sym) {
	case sym.SI : return "SI"; 
	case sym.CHAINE : return "CHAINE "+token.value;  
	case sym.ENTIER : return "ENTIER "+token.value;  
	//  ... A compl�ter !!
	default : return "Token impr�vu ou error";
	}
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



void exemple_de_fonction(String i1, String i2)
{
	String m = "Erreur syntaxique <"+i2+"> au lieu de <"+i1+">";
	if (!(i1.equals(i2))) parser.report_error(m,null);	 
}




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= INF PROGRAMME_DOMUS SUP zone_decla_appareils zone_decla_interfaces zone_decla_scenariis zone_decla_commandes INF SLASH PROGRAMME_DOMUS SUP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // liste_ident ::= IDENT VIRGULE liste_ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_ident",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // liste_ident ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_ident",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // zone_decla_appareils ::= INF DECLARATION_APPAREILS SUP liste_action_appareil INF SLASH DECLARATION_APPAREILS SUP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zone_decla_appareils",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // liste_action_appareil ::= action_appareil liste_action_appareil 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_action_appareil",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // liste_action_appareil ::= action_appareil 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_action_appareil",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // action_appareil ::= TYPE_APPAREIL liste_ident POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_appareil",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // action_appareil ::= AUTRE_APPAREIL PAROUV TYPE_AUTRE_APPAREIL PARFER liste_ident POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_appareil",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // action_appareil ::= DEFINIR IDENT EGAL ACOOUV liste_ident ACOFER POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_appareil",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // zone_decla_interfaces ::= INF DECLARATION_INTERFACES SUP liste_action_interface INF SLASH DECLARATION_INTERFACES SUP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zone_decla_interfaces",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // liste_action_interface ::= action_interface liste_action_interface 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_action_interface",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // liste_action_interface ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_action_interface",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // action_interface ::= TYPE_INTERFACE liste_ident POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_interface",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // zone_decla_scenariis ::= INF DECLARATION_SCENARII SUP liste_declaration_scenarii INF SLASH DECLARATION_SCENARII SUP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zone_decla_scenariis",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // liste_declaration_scenarii ::= liste_declaration_scenarii declaration_scenarii 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_declaration_scenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // liste_declaration_scenarii ::= declaration_scenarii 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_declaration_scenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_scenarii ::= INF SCENARIO IDENT SUP liste_action_scenarii INF SLASH SCENARIO IDENT SUP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_scenarii",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // liste_action_scenarii ::= action_scenarii liste_action_scenarii 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_action_scenarii",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // liste_action_scenarii ::= action_scenarii 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_action_scenarii",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // action_scenarii ::= boucle_pourtout 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_scenarii",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // action_scenarii ::= conditionnelle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_scenarii",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // action_scenarii ::= EXECUTER_SCENARIO IDENT PT_VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_scenarii",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // action_scenarii ::= MESSAGE PAROUV parametre_message PARFER PT_VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_scenarii",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // action_scenarii ::= IDENT POINT METHODE PT_VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_scenarii",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boucle_pourtout ::= POURTOUT IDENT DEUX_PT TYPE_APPAREIL FAIRE liste_action_scenarii FAIT PT_VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boucle_pourtout",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boucle_pourtout ::= POURTOUT IDENT DEUX_PT AUTRE_APPAREIL FAIRE liste_action_scenarii FAIT PT_VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boucle_pourtout",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boucle_pourtout ::= POURTOUT IDENT DEUX_PT AUTRE_APPAREIL PAROUV TYPE_AUTRE_APPAREIL PARFER FAIRE liste_action_scenarii FAIT PT_VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boucle_pourtout",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boucle_pourtout ::= POURTOUT IDENT DEUX_PT IDENT FAIRE liste_action_scenarii FAIT PT_VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boucle_pourtout",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // conditionnelle ::= SI condition ALORS liste_action_scenarii FSI PT_VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditionnelle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // conditionnelle ::= SI condition ALORS liste_action_scenarii SINON liste_action_scenarii FSI PT_VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditionnelle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condition ::= PAROUV etat EGAL EGAL etat PARFER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // etat ::= ENUM_ETAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // etat ::= IDENT POINT METHODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametre_message ::= parametre_message VIRGULE contenu_message 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametre_message",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametre_message ::= contenu_message 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametre_message",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contenu_message ::= CHAINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenu_message",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // contenu_message ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenu_message",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contenu_message ::= etat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenu_message",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // zone_decla_commandes ::= INF DECLARATION_COMMANDES SUP liste_action_commande INF SLASH DECLARATION_COMMANDES SUP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zone_decla_commandes",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // liste_action_commande ::= action_commande liste_action_commande 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_action_commande",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // liste_action_commande ::= action_commande 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_action_commande",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // action_commande ::= ASSOCIER IDENT EGAL IDENT POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_commande",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // action_commande ::= ASSOCIER IDENT EGAL ACOOUV liste_ident ACOFER POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_commande",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // action_commande ::= PROGRAMMER IDENT EGAL date POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_commande",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // action_commande ::= PROGRAMMER IDENT EGAL ACOOUV liste_date ACOFER POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_commande",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // liste_date ::= liste_date VIRGULE date 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_date",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // liste_date ::= date 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_date",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // date ::= PAROUV ENTIER VIRGULE ENTIER VIRGULE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARFER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("date",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // date ::= PAROUV UNDERSCORE VIRGULE ENTIER VIRGULE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARFER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("date",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // date ::= PAROUV ENTIER VIRGULE UNDERSCORE VIRGULE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARFER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("date",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // date ::= PAROUV ENTIER VIRGULE ENTIER VIRGULE UNDERSCORE VIRGULE ENTIER VIRGULE ENTIER PARFER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("date",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // date ::= PAROUV ENTIER VIRGULE ENTIER VIRGULE ENTIER VIRGULE UNDERSCORE VIRGULE ENTIER PARFER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("date",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
